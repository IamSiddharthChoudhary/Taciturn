{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "contracts/createNFT.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.7;\n\nimport \"./IcreateNFT.sol\";\n\ncontract CreateNFT is ICreateNFT{\n\n    event NFTTransfered(string indexed from ,string indexed to ,uint256 indexed tokenID);\n    event MetadataUpdate(uint256 indexed tokenID);\n\n    mapping(address => mapping (uint256=> string)) private addToNullHsh;\n    mapping(string => address) private nullToAdd;\n    mapping(address => uint256) private noOfNullHshs; \n    mapping(uint256 => string) private owners;\n    mapping(uint256 => string) private tokenURIs;\n    mapping (uint256 => address) tokenIDToAdd;\n\n    string _name = \"zkMP\";\n    string _symbol = \"Z\";\n    uint256 private tokenID;\n    \n    constructor(){\n        tokenID = 0;\n    }\n\n    function createNFT(string memory nullifierHash, string memory tokenURI) public {\n        address creator = msg.sender;\n\n        setAddAndNull(creator,nullifierHash);\n        mintNFT(nullifierHash,tokenURI);\n        tokenID++;\n    }\n\n    function mintNFT(string memory nullifierHash,string memory _tokenURI) internal {\n        owners[tokenID] = nullifierHash;\n        setTokenURI(tokenID,_tokenURI);\n\n        emit NFTTransfered(\"\", nullifierHash, tokenID);\n    }\n\n    function setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\n        tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    function transferFrom(string memory ownerNul, string memory buyerNul, address buyer, uint256 _tokenID) public override{\n\n        require(getApprovedAdd(_tokenID) == msg.sender, \"No approved to make this call\");\n        require(keccak256(abi.encodePacked(ownerOf(_tokenID))) == keccak256(abi.encodePacked(ownerNul)), \"Invalid nullifier hash\");\n\n        transferNFT(_tokenID, buyerNul, buyer);\n    }\n\n    function transferNFT(uint256 _tokenID, string memory nullifierHash, address buyer) public override{\n        // owner losing nft\n        string memory crtrNullHsh = owners[_tokenID];\n        address owner = nullToAdd[crtrNullHsh]; \n        delete owners[_tokenID];\n        uint256 n = noOfNullHshs[owner] - 1;\n        delete addToNullHsh[owner][n];\n        noOfNullHshs[owner] -= 1 ;\n\n        // Buyer getting nft\n        setAddAndNull(buyer,nullifierHash);\n        owners[_tokenID] = nullifierHash; \n    }   \n\n    function ownerOf(uint256 _tokenID) public override view returns (string memory){\n        return owners[_tokenID];\n    }\n\n    function exists(uint256 _tokenID) internal view returns (bool) {\n        bytes memory strBytes = bytes(owners[_tokenID]);\n        return strBytes.length == 0;\n    }\n\n    function setAddAndNull(address add, string memory nul) internal{\n        nullToAdd[nul] = add;\n        uint256 n = noOfNullHshs[add];\n        addToNullHsh[add][n] = nul;\n        noOfNullHshs[add] += 1;\n    }\n\n\n    function approve(uint256 _tokenID, address op) public override{\n        string memory ownerNull = owners[_tokenID];\n        address owner = nullToAdd[ownerNull];\n\n        require(op != owner,\"Invalid operator address\");\n        tokenIDToAdd[_tokenID] = op;\n    }\n\n\n    function getApprovedAdd(uint256 _tokenID) public override view returns(address){\n        return tokenIDToAdd[_tokenID];\n    }\n\n    function getNumberOfTokens() public view returns(uint256) {\n        return tokenID;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n} "
    },
    "contracts/IcreateNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT;\npragma solidity ^0.8.7;\n\ninterface ICreateNFT {\n    \n    function approve(uint256 _tokenID, address op) external;\n    function getApprovedAdd(uint256 _tokenID) external view returns(address);    \n    function ownerOf(uint256 _tokenID) external view returns (string memory);\n    function transferNFT(uint256 _tokenID, string memory nullifierHash, address buyer) external;\n    function transferFrom(string memory ownerNul, string memory buyerNul, address buyer, uint256 _tokenID) external;\n}"
    },
    "contracts/nftMarketPlace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./IcreateNFT.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\nerror ItemNotForSale(address nftAddress, uint256 tokenId);\nerror NotListed(address nftAddress, uint256 tokenId);\nerror AlreadyListed(address nftAddress, uint256 tokenId);\nerror NoProceeds();\nerror NotOwner();\nerror NotApprovedForMarketplace();\nerror PriceMustBeAboveZero();\n\ncontract NftMarketplace is ReentrancyGuard{\n    struct Listing {\n        uint256 price;\n        string seller;\n    }\n\n    event ItemListed(\n        string indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    event ItemCanceled(\n        string indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId\n    );\n\n    event ItemBought(\n        string indexed buyer,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n    mapping(string => uint256) private s_proceeds;\n\n    modifier notListed(\n        address nftAddress,\n        uint256 tokenId\n    ) {\n        Listing memory listing = s_listings[nftAddress][tokenId];\n        if (listing.price > 0) {\n            revert AlreadyListed(nftAddress, tokenId);\n        }\n        _;\n    }\n\n    modifier isListed(address nftAddress, uint256 tokenId) {\n        Listing memory listing = s_listings[nftAddress][tokenId];\n        if (listing.price <= 0) {\n            revert NotListed(nftAddress, tokenId);\n        }\n        _;\n    }\n\n    modifier isOwner(\n        address nftAddress,\n        uint256 tokenId,\n        string memory spenderNul\n    ) {\n        ICreateNFT nft = ICreateNFT(nftAddress);\n        string memory ownerNul = nft.ownerOf(tokenId);\n        if (keccak256(abi.encodePacked(spenderNul)) != keccak256(abi.encodePacked(ownerNul))) {\n            revert NotOwner();\n        } \n        _;\n    }\n\n    function listItem(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price,\n        string memory nul\n    )\n        external\n        notListed(nftAddress, tokenId)\n        isOwner(nftAddress, tokenId, nul)\n    {\n        if (price <= 0) {\n            revert PriceMustBeAboveZero();\n        }\n        ICreateNFT nft = ICreateNFT(nftAddress);\n        if (nft.getApprovedAdd(tokenId) != address(this)) {\n            revert NotApprovedForMarketplace();\n        }\n        s_listings[nftAddress][tokenId] = Listing(price, nul);\n        emit ItemListed(nul, nftAddress, tokenId, price);\n    }\n\n    function cancelListing(address nftAddress, uint256 tokenId, string memory nul)\n        external\n        isOwner(nftAddress, tokenId, nul)\n        isListed(nftAddress, tokenId)\n    {\n        delete (s_listings[nftAddress][tokenId]);\n        emit ItemCanceled(nul, nftAddress, tokenId);\n    }\n\n    function buyItem(address nftAddress, uint256 tokenId, string memory nul)\n        external\n        payable\n        isListed(nftAddress, tokenId)\n        nonReentrant\n    {\n        Listing memory listedItem = s_listings[nftAddress][tokenId];\n        if (msg.value < listedItem.price) {\n            revert PriceNotMet(nftAddress, tokenId, listedItem.price);\n        }\n        s_proceeds[listedItem.seller] += msg.value;\n        delete (s_listings[nftAddress][tokenId]);\n        ICreateNFT(nftAddress).transferNFT(tokenId,nul,msg.sender);\n        emit ItemBought(nul, nftAddress, tokenId, listedItem.price);\n    }\n\n    function updateListing(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 newPrice,\n        string memory nul\n    )\n        external\n        isListed(nftAddress, tokenId)\n        nonReentrant\n        isOwner(nftAddress, tokenId, nul)\n    {\n        if (newPrice <= 0) {\n            revert PriceMustBeAboveZero();\n        }\n        s_listings[nftAddress][tokenId].price = newPrice;\n        emit ItemListed(nul, nftAddress, tokenId, newPrice);\n    }\n\n    function withdrawProceeds(string memory nul) external {\n        uint256 proceeds = s_proceeds[nul];\n        if (proceeds <= 0) {\n            revert NoProceeds();\n        }\n        s_proceeds[nul] = 0;\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    function getListing(address nftAddress, uint256 tokenId)\n        external\n        view\n        returns (Listing memory)\n    {\n        return s_listings[nftAddress][tokenId];\n    }\n\n    function getProceeds(string memory sellerNul) external view returns (uint256) {\n        return s_proceeds[sellerNul];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}