{
  "address": "0x643bB72abD9ebA42339D70e3a72Cb5911d2a4a9b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pubSignals",
          "type": "uint256[2]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e25c2bebf5861d651c84095164f74e43808b3592641cc016f9f570212bb1ae5",
  "receipt": {
    "to": null,
    "from": "0x2196636D8669f6c2A772CbA012e7389CEAaad054",
    "contractAddress": "0x643bB72abD9ebA42339D70e3a72Cb5911d2a4a9b",
    "transactionIndex": 43,
    "gasUsed": "400790",
    "logsBloom": "0x
    "blockHash": "0x1bb19e9878bfd7004799b61a3e56fe33f915095059ffb73d384a7b42116c8aea",
    "transactionHash": "0x8e25c2bebf5861d651c84095164f74e43808b3592641cc016f9f570212bb1ae5",
    "logs": [],
    "blockNumber": 6360732,
    "cumulativeGasUsed": "9839530",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "2b06c5c0e789f84ad75673499fbe69c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pubSignals\",\"type\":\"uint256[2]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 7620273905133455123923188699501120573688059407543408093221814931786692355161;\\n    uint256 constant alphay  = 13857441225875067601898474760724102506099012550535652825584149312692884633029;\\n    uint256 constant betax1  = 20897713325791917749152979592608001826377651498226262868218962092957695452499;\\n    uint256 constant betax2  = 19772298543080390696675496260463308972299381250046108538257960605389088562787;\\n    uint256 constant betay1  = 7101202506321775967447212738930159242589068036862951607439995588485388122033;\\n    uint256 constant betay2  = 6595858493288377996593226572718813908774170626004437745431995466988623628820;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 2556100139190897245702136016233741463931304688601324547850541197302440418210;\\n    uint256 constant deltax2 = 12425400334273814035170652841350296301342880866228718242172319022081514307212;\\n    uint256 constant deltay1 = 10399863525682953886304444726706295593160526349646246498252688178125433810633;\\n    uint256 constant deltay2 = 14833222505490121953454117631979355810527426698546840557608248172577834381820;\\n\\n    \\n    uint256 constant IC0x = 18683206396108297281768026122712053156557057023847304752001085986434851231563;\\n    uint256 constant IC0y = 15292891358690313625524458286710737641994471158378654608038730687629138459114;\\n    \\n    uint256 constant IC1x = 17758138651411043737064317325620576753036764737396921699779579263222521600035;\\n    uint256 constant IC1y = 15551761074229294411642230948617285132363184370346144117943330221386241154469;\\n    \\n    uint256 constant IC2x = 3783044405279299285640680055786914311095578968193533986153465386793559007738;\\n    uint256 constant IC2y = 19434748421699528219555872959149036745768512038761704896854072249116844504602;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[2] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x4aa2bcdb81ffc4d90ddb50225bf794dcf172d937b2621f0a9957cfca01abf82e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610649806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5c9d69e14610030575b600080fd5b61004a60048036038101906100459190610574565b610060565b60405161005791906105f8565b60405180910390f35b60006104dd565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f294e51f0ca42558ee4af6acd8f37ca658f427fbfe94af9d359b7f0ef1e33574b81527f21cf7842e4fd0d7f5e763f740c9720cda38665c019a9935b55ee4ebbf369f9ea60208201526101a960008801357f2261fc1e4e36e6054065b555bbbaa3ddfb2b836b288fdbda06c2173ae0a01da57f2742c0131b11b1a96036a6680288574a24c14b692e3770408354f3e3870518238461009b565b6101f960208801357f2af7ad83d40bd37c1a52a46c78bfdcf6db696a3e33d5e4604a249fd9e072361a7f085d2093c38c139f540a85e5ba0dd18d47ca6014d89ab84dc3a0c7be4d4221fa8461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f10d8ec146370b7905f49ef7dcd47c8e99e0c7556039647f0476d00403f6ce45960c08301527f1ea308a6472e7165bb7c57f32503e8868c6de66afc79b2364baa6e07159875c560e08301527f2e33afc40886437b014d495e067666d6f20baf7d7cfd8a454f5b52fc0fffa5536101008301527f2bb6b971b135267c92695929603acba9ba192f72228d7f63808e973a0d971e636101208301527f0fb3236023234041d998b820e09366df7e10fe6be3d686af889eb0f20ee337b16101408301527f0e951fa4ec7706b54ed5078863288fcd172435387c5c672dd71c83ab58860a14610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f05a6b38f94a21a71122c9049b6b2044e446e6be738803106acf310392b445ba26102808301527f1b7887017248903094f4dfd573f1928e01f00070f3714c36c655bc0a2c9a7e8c6102a08301527f16fe1d398ec76203299299c901822a1cec28a39a62e474b9c7ec7b8f245d2ec96102c08301527f20cb4e7184cf732f1913153d0b5414692920c092e9fb6dcf7666fdbd906fb1fc6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104f56000840135610067565b6105026020840135610067565b61050f6040840135610067565b61051c818486888a610106565b8060005260206000f35b600080fd5b600080fd5b60008190508260206002028201111561054c5761054b61052b565b5b92915050565b60008190508260406002028201111561056e5761056d61052b565b5b92915050565b600080600080610140858703121561058f5761058e610526565b5b600061059d87828801610530565b94505060406105ae87828801610552565b93505060c06105bf87828801610530565b9250506101006105d187828801610530565b91505092959194509250565b60008115159050919050565b6105f2816105dd565b82525050565b600060208201905061060d60008301846105e9565b9291505056fea26469706673582212201cc49f1bd43247d3d513cba06cf406df2957770a629010b698b2591ca090e4b964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f5c9d69e14610030575b600080fd5b61004a60048036038101906100459190610574565b610060565b60405161005791906105f8565b60405180910390f35b60006104dd565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f294e51f0ca42558ee4af6acd8f37ca658f427fbfe94af9d359b7f0ef1e33574b81527f21cf7842e4fd0d7f5e763f740c9720cda38665c019a9935b55ee4ebbf369f9ea60208201526101a960008801357f2261fc1e4e36e6054065b555bbbaa3ddfb2b836b288fdbda06c2173ae0a01da57f2742c0131b11b1a96036a6680288574a24c14b692e3770408354f3e3870518238461009b565b6101f960208801357f2af7ad83d40bd37c1a52a46c78bfdcf6db696a3e33d5e4604a249fd9e072361a7f085d2093c38c139f540a85e5ba0dd18d47ca6014d89ab84dc3a0c7be4d4221fa8461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f10d8ec146370b7905f49ef7dcd47c8e99e0c7556039647f0476d00403f6ce45960c08301527f1ea308a6472e7165bb7c57f32503e8868c6de66afc79b2364baa6e07159875c560e08301527f2e33afc40886437b014d495e067666d6f20baf7d7cfd8a454f5b52fc0fffa5536101008301527f2bb6b971b135267c92695929603acba9ba192f72228d7f63808e973a0d971e636101208301527f0fb3236023234041d998b820e09366df7e10fe6be3d686af889eb0f20ee337b16101408301527f0e951fa4ec7706b54ed5078863288fcd172435387c5c672dd71c83ab58860a14610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f05a6b38f94a21a71122c9049b6b2044e446e6be738803106acf310392b445ba26102808301527f1b7887017248903094f4dfd573f1928e01f00070f3714c36c655bc0a2c9a7e8c6102a08301527f16fe1d398ec76203299299c901822a1cec28a39a62e474b9c7ec7b8f245d2ec96102c08301527f20cb4e7184cf732f1913153d0b5414692920c092e9fb6dcf7666fdbd906fb1fc6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104f56000840135610067565b6105026020840135610067565b61050f6040840135610067565b61051c818486888a610106565b8060005260206000f35b600080fd5b600080fd5b60008190508260206002028201111561054c5761054b61052b565b5b92915050565b60008190508260406002028201111561056e5761056d61052b565b5b92915050565b600080600080610140858703121561058f5761058e610526565b5b600061059d87828801610530565b94505060406105ae87828801610552565b93505060c06105bf87828801610530565b9250506101006105d187828801610530565b91505092959194509250565b60008115159050919050565b6105f2816105dd565b82525050565b600060208201905061060d60008301846105e9565b9291505056fea26469706673582212201cc49f1bd43247d3d513cba06cf406df2957770a629010b698b2591ca090e4b964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}